"""
Event system for the backtesting framework.

This module defines all event types that flow through the event loop.
"""

from dataclasses import dataclass
from datetime import datetime
from enum import Enum
from typing import Any, Dict, Optional, Union
import numpy as np


class EventType(Enum):
    """Types of events in the system."""
    MARKET = "MARKET"
    SIGNAL = "SIGNAL" 
    ORDER = "ORDER"
    FILL = "FILL"


@dataclass
class Event:
    """Base event class."""
    timestamp: datetime
    event_type: EventType
    
    def __post_init__(self):
        if isinstance(self.timestamp, str):
            self.timestamp = datetime.fromisoformat(self.timestamp)


@dataclass
class MarketEvent(Event):
    """Market data event (tick or bar)."""
    symbol: str
    bid: Optional[float] = None
    ask: Optional[float] = None
    bid_size: Optional[int] = None
    ask_size: Optional[int] = None
    last: Optional[float] = None
    last_size: Optional[int] = None
    volume: Optional[int] = None
    open: Optional[float] = None
    high: Optional[float] = None
    low: Optional[float] = None
    close: Optional[float] = None
    
    def __post_init__(self):
        super().__post_init__()
        self.event_type = EventType.MARKET
        
    @property
    def mid_price(self) -> Optional[float]:
        """Calculate mid price from bid/ask."""
        if self.bid is not None and self.ask is not None:
            return (self.bid + self.ask) / 2
        return self.last
    
    @property
    def spread(self) -> Optional[float]:
        """Calculate bid-ask spread."""
        if self.bid is not None and self.ask is not None:
            return self.ask - self.bid
        return None


@dataclass
class SignalEvent(Event):
    """Signal generated by strategy."""
    symbol: str
    signal_type: str  # "LONG", "SHORT", "EXIT"
    strength: float = 1.0
    metadata: Optional[Dict[str, Any]] = None
    
    def __post_init__(self):
        super().__post_init__()
        self.event_type = EventType.SIGNAL


@dataclass
class OrderEvent(Event):
    """Order to be executed."""
    symbol: str
    order_type: str  # "MARKET", "LIMIT", "STOP"
    quantity: int
    side: str  # "BUY", "SELL"
    time_in_force: str = "DAY"  # "DAY", "GTC", "IOC"
    limit_price: Optional[float] = None
    stop_price: Optional[float] = None
    order_id: Optional[str] = None
    strategy_id: Optional[str] = None
    
    def __post_init__(self):
        super().__post_init__()
        self.event_type = EventType.ORDER
        if self.order_id is None:
            self.order_id = f"{self.symbol}_{self.timestamp.strftime('%Y%m%d_%H%M%S_%f')}"


@dataclass
class FillEvent(Event):
    """Order fill confirmation."""
    symbol: str
    quantity: int
    side: str  # "BUY", "SELL"
    fill_price: float
    commission: float = 0.0
    order_id: Optional[str] = None
    strategy_id: Optional[str] = None
    
    def __post_init__(self):
        super().__post_init__()
        self.event_type = EventType.FILL
        
    @property
    def cost(self) -> float:
        """Total cost including commission."""
        return self.quantity * self.fill_price + self.commission


# Event factory functions
def create_market_event(
    timestamp: Union[datetime, str],
    symbol: str,
    **kwargs
) -> MarketEvent:
    """Create a market event."""
    return MarketEvent(timestamp=timestamp, symbol=symbol, **kwargs)


def create_signal_event(
    timestamp: Union[datetime, str],
    symbol: str,
    signal_type: str,
    strength: float = 1.0,
    **kwargs
) -> SignalEvent:
    """Create a signal event."""
    return SignalEvent(
        timestamp=timestamp,
        symbol=symbol,
        signal_type=signal_type,
        strength=strength,
        **kwargs
    )


def create_order_event(
    timestamp: Union[datetime, str],
    symbol: str,
    order_type: str,
    quantity: int,
    side: str,
    **kwargs
) -> OrderEvent:
    """Create an order event."""
    return OrderEvent(
        timestamp=timestamp,
        symbol=symbol,
        order_type=order_type,
        quantity=quantity,
        side=side,
        **kwargs
    )


def create_fill_event(
    timestamp: Union[datetime, str],
    symbol: str,
    quantity: int,
    side: str,
    fill_price: float,
    **kwargs
) -> FillEvent:
    """Create a fill event."""
    return FillEvent(
        timestamp=timestamp,
        symbol=symbol,
        quantity=quantity,
        side=side,
        fill_price=fill_price,
        **kwargs
    ) 